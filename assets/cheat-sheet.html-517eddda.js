import{_ as t,W as l,X as c,Y as a,Z as n,$ as s,a0 as i,F as o}from"./framework-2ebc2ee8.js";const d={},r=a("h2",{id:"安装",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),n(" 安装")],-1),p={href:"https://desktop.github.com/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},h=i(`<h2 id="配置工具" tabindex="-1"><a class="header-anchor" href="#配置工具" aria-hidden="true">#</a> 配置工具</h2><blockquote><p>对所有本地仓库的用户信息进行配置</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;[name]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对你的commit操作设置关联的用户名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;[email address]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对你的commit操作设置关联的邮箱地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> color.ui auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启用有帮助的彩色命令行输出</p><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h2><blockquote><p>分支是使用 Git 工作的一个重要部分。你做的任何提交都会发生在当前“checked out”到的分支上。使用 git status 查看那是哪个分支。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个新分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> switch <span class="token parameter variable">-c</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换到指定分支并更新工作目录(working directory)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将指定分支的历史合并到当前分支。这通常在拉取请求(PR)中完成，但也是一个重要的 Git 操作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除指定分支</p><h2 id="进行更改" tabindex="-1"><a class="header-anchor" href="#进行更改" aria-hidden="true">#</a> 进行更改</h2><blockquote><p>浏览并检查项目文件的发展</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出当前分支的版本历史</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> log <span class="token parameter variable">--follow</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出文件的版本历史，包括重命名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>展示两个分支之间的内容差异</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出指定commit的元数据和内容变化</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将文件进行快照处理用于版本控制</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;[descriptive message]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将文件快照永久地记录在版本历史中</p><h2 id="重做提交" tabindex="-1"><a class="header-anchor" href="#重做提交" aria-hidden="true">#</a> 重做提交</h2><blockquote><p>清除错误和构建用于替换的历史</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>撤销所有 [commit] 后的的提交，在本地保存更改</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>放弃所有历史，改回指定提交。</p>`,38),g={class:"hint-container danger"},b=a("p",{class:"hint-container-title"},"警告",-1),m={href:"https://github.community/",target:"_blank",rel:"noopener noreferrer"},v=i(`<h2 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库" aria-hidden="true">#</a> 创建仓库</h2><blockquote><p>当着手于一个新的仓库时，你只需创建一次。要么在本地创建，然后推送到 GitHub；要么通过 clone 一个现有仓库。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在使用过 <code>git init</code> 命令后，使用以下命令将本地仓库与一个 GitHub 上的空仓库连接起来：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>url<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将现有目录转换为一个 Git 仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Clone（下载）一个已存在于 GitHub 上的仓库，包括所有的文件、分支和提交(commits)</p><h2 id="gitignore-文件" tabindex="-1"><a class="header-anchor" href="#gitignore-文件" aria-hidden="true">#</a> .gitignore 文件</h2>`,9),k={href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"},f=a("h2",{id:"同步更改",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#同步更改","aria-hidden":"true"},"#"),n(" 同步更改")],-1),_={href:"http://GitHub.com",target:"_blank",rel:"noopener noreferrer"},x=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> fetch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载远端跟踪分支的所有历史</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> merge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将远端跟踪分支合并到当前本地分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将所有本地分支提交上传到 GitHub</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用来自 GitHub 的对应远端分支的所有新提交更新你当前的本地工作分支。<strong>git pull 是 git fetch 和 git merge 的结合</strong></p><h2 id="术语表" tabindex="-1"><a class="header-anchor" href="#术语表" aria-hidden="true">#</a> 术语表</h2><ul><li><strong>git:</strong> 一个开源的分布式版本控制系统</li><li><strong>GitHub:</strong> 一个托管和协作管理 Git 仓库的平台</li><li><strong>commit 提交:</strong> 一个 Git 对象，是你整个仓库的快照的哈希值</li><li><strong>branch 分支:</strong> 一个轻型可移动的 commit 指针</li><li><strong>clone:</strong> 一个仓库的本地版本，包含所有提交和分支</li><li><strong>remote 远端:</strong> 一个 GitHub 上的公共仓库，所有小组成员通过它来交换修改</li><li><strong>fork:</strong> 一个属于另一用户的 GitHub 上的仓库的副本</li><li><strong>pull request 拉取请求:</strong> 一处用于比较和讨论分支上引入的差异，且具有评审、评论、集成测试等功能的地方</li><li><strong>HEAD:</strong> 代表你当前的工作目录。使用git checkout 可移动 HEAD 指针到不同的分支、标记(tags)或提交</li></ul>`,10);function $(q,G){const e=o("ExternalLinkIcon");return l(),c("div",null,[r,a("p",null,[n("GitHub Desktop："),a("a",p,[n("desktop.github.com"),s(e)])]),a("p",null,[n("Git 全平台版："),a("a",u,[n("git-scm.com"),s(e)])]),h,a("div",g,[b,a("p",null,[n("小心！更改历史可能带来不良后果。如果你需要更改 GitHub（远端）已有的提交，请谨慎操作。如果你需要帮助，可访问 "),a("a",m,[n("github.community"),s(e)]),n(" 或联系支持(support)。")])]),v,a("blockquote",null,[a("p",null,[n("有时一些文件最好不要用 Git 跟踪。这通常在名为 .gitignore 的特殊文件中完成。你可以在 "),a("a",k,[n("https://github.com/github/gitignore"),s(e)]),n(" 找到有用的 .gitignore 文件模板。")])]),f,a("blockquote",null,[a("p",null,[n("将你本地仓库与 "),a("a",_,[n("GitHub.com"),s(e)]),n(" 上的远端仓库同步")])]),x])}const E=t(d,[["render",$],["__file","cheat-sheet.html.vue"]]);export{E as default};
